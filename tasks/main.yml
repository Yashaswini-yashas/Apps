---
# tasks file for apps

# tasks for jenkins

- name: install openjdk
  yum:
    name: "{{ java }}"
    state: present

- name: prints the version of java
  shell: java -version 2>&1
  register: java_version
- debug: msg="{{java_version.stdout}}"

- name: prints the version of python
  shell: python --version 2>&1
  register: python_version
- debug: msg="{{python_version.stdout}}"

- name: download jenkins.repo
  get_url:
    url: "{{ jenkins_repo }}"
    dest: "{{ jenkins_repo_dest }}"

- name: import jenkins key
  rpm_key:
    state: present
    key: "{{ jenkins_key }}"

- name: install jenkins
  yum:
    name: jenkins
    state: present

- name: remove the jenkins folder
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ jenkins_remove }}"
    - "{{ jenkins_remove_zip }}"

- name: Download zip file from s3 bucket
  get_url:
    url: "{{ s3_bucket_zip_file_for_jenkins }}"
    dest: "{{ dest_to_download_the_zip_file }}"

- name: Unarchive zip file in the same path
  unarchive:
    src: "{{ src_path_of_zip_file }}"
    dest: "{{ dest_path_of_zip_file }}"
    remote_src: yes

- name: Recursively change ownership of a directory
  file:
    path: "{{ jenkins_folder_path_to_change_ownership }}"
    state: directory
    recurse: yes
    owner: jenkins
    group: jenkins

- name: to add the java path
  command: sed -e '84i/usr/lib/jvm/zulu8.40.0.25-ca-jdk8.0.222-linux_x64/bin/java' -i /etc/init.d/jenkins
  args:
    warn: false

- name: start jenkins
  systemd:
    name: jenkins
    state: started

- name: enable jenkins
  systemd:
    name: jenkins
    enabled: true

- debug:
    msg:
    - Jenkins is successfully installed
    - Jenkins is up and running


# tasks file for sonar

- block:
    - name: Download sonarqube
      get_url:
        url: "{{ sonar_url }}"
        dest: "{{ sonar_dest }}"
  rescue:
  - debug: msg="Sonarqube download failed due to error in the url"
  - debug: msg="Sonarqube download and installation failed"

- name: Download sonarqube
  get_url:
    url: "{{ sonar_url }}"
    dest: "{{ sonar_dest }}"

- name: Unarchive the config zip file in the same folder
  unarchive:
    src: "{{ sonar_zip_path }}"
    dest: "{{ sonar_unarchive_path }}"
    remote_src: yes

- name: start sonar on default port
  shell: "{{ sonar_start }}"
  args:
    chdir: "{{ sonar_start_dir }}"
    warn: false

- debug:
    msg:
    - Sonar is successfully installed
    - Sonar is up and running


# tasks file for tomcat

- name: add group "tomcat"
  group: name=tomcat

- name: add user "tomcat"
  user: name=tomcat group=tomcat home="{{ tomcat_home }}" createhome=no
  become: True
  become_method: sudo

- block:
    - name: Download Tomcat
      get_url: url="{{ tomcat_url }}" dest="{{ dest_to_download_file }}"
      register: result_block

  rescue:
  - debug: msg="Tomcat download failed due to error in the url"
  - debug: msg="Tomcat download and installation failed"

- name: Extract archive
  command: chdir=/usr/share /bin/tar xvf /opt/apache-tomcat-8.5.43.tar.gz -C /opt/ creates=/opt/apache-tomcat-8.5.43

- name: Symlink install directory
  file: src="{{ symlink_src }}" path="{{ symlink_path }}" state=link

- name: Change ownership of Tomcat installation
  file: path="{{ change_ownership_path }}" owner=tomcat group=tomcat state=directory recurse=yes

- name: remove the config folder
  shell: rm -rf "{{ remove_config }}"

- name: Download the tomcat config file from s3 bucket
  get_url:
    url: "{{ config_file_url_from_s3 }}"
    dest: "{{ dest_path }}"

- name: Unarchive the config zip file in the same folder
  unarchive:
    src: "{{ unarchive_src_path }}"
    dest: "{{ unarchive_dest_path }}"
    remote_src: yes

- name: remove the meta context file
  shell: rm -rf "{{ remove_meta_file }}"

- name: Download the meta context tomcat file from s3 bucket
  get_url:
    url: "{{ url_for_meta_file_from_s3 }}"
    dest: "{{ dest_for_meta_file }}"

- name: Unarchive the context zip file in the same folder
  unarchive:
    src: "{{ unarchive_the_meta_file_src }}"
    dest: "{{ unarchive_the_meta_file_dest }}"
    remote_src: yes

- name: Run Tomcat
  shell: ./startup.sh
  args:
    chdir: "{{ dir_to_start_tomcat }}"

- name: wait for tomcat to start
  wait_for: port="{{ tomcat_port }}" delay=3 timeout=20

- debug: msg="Tomcat is up and running"


# tasks file for nexus

- name: Downloading the nexus zip file
  get_url:
    url: "{{ nexus_url_zip }}"
    dest: "{{ dest_to_download_nexus_zip }}"

- name: Unarchive zip file in the same path
  unarchive:
    src: "{{ nexus_unarchive_src }}"
    dest: "{{ nexus_unarchive_dest }}"
    remote_src: yes

- name: remove the zip file from the folder
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ nexus_unarchive_src }}"

- name: linking the directory with nexus directory
  shell: ln -sf nexus-2.14.2-01/ nexus

- name: setting the nexus home
  shell: "echo $NEXUS_HOME"
  environment:
    NEXUS_HOME: "{{ nexus_home }}"

- name: adding the nexus user
  command: sudo useradd -m nexus
  ignore_errors: yes


- name: changing ownership of the nexus folder
  command: sudo chown -R nexus:nexus "{{ nexus_fold }}"

- name: changing ownership of the sonatype work folder
  command: sudo chown -R nexus:nexus "{{ nexus_sonatype_fold }}"

- name: replacing the content present in the file
  command: sed -i '14d' "{{ nexus_folder }}"

- name: replacing the content present in the file
  command: sed -i '23d' "{{ nexus_folder }}"

- name: replacing the content present in the file
  command: sed -i '34d' "{{ nexus_folder }}"

- name: setting the nexus home
  command: sed -i '14i NEXUS_HOME="{{ nexus_fold }}"' "{{ nexus_folder }}"

- name: changing the run as user to nexus
  command: sed -i '23i RUN_AS_USER="nexus"' "{{ nexus_folder }}"

- name: replacing the content present in the file
  command: sed -i '34i PIDDIR="/home/nexus"' "{{ nexus_folder }}"

- name: copying the nexus folder in the local directory to nexus folder in etc directory
  command: sudo cp "{{ nexus_folder }}" "{{ etc_dir }}"

- name: changing mode of the etc init.d directory
  command: sudo chmod 755 "{{ etc_dir }}"

- name: check config
  shell: chkconfig --add nexus
  args:
    chdir: /etc/init.d

- name: checking if config is on
  command: sudo chkconfig --level 345 nexus on

- name: remove the conf folder from the nexus directory
  shell: rm -rf "{{ remove_conf }}"

- name: Downloading the conf zip file from the s3 bucket
  get_url:
    url: "{{ nexus_s3_zip_file_url }}"
    dest: "{{ dest_to_download_zip }}"

- name: Unarchive zip file in the same path
  unarchive:
    src: "{{ unarchive_zip_src_path }}"
    dest: "{{ unarchive_zip_dest_path }}"
    remote_src: yes

- name: starting nexus
  command: sudo service nexus start

- name: wait for nexus to start
  wait_for: port="{{ nexus_port }}" delay=3 timeout=150

- name: remove the nexus xml folder from the conf file in order to change the deployment policy
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ nexus_xml }}"

- name: create a repository using nexus cli after starting nexus
  command: nexus-cli create_repository "PETCLINIC"

- name: remove the nexus xml folder from the conf file in order to change the deployment policy
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ nexus_xml }}"

- name: Download zip file from s3 bucket
  get_url:
    url: "{{ nexus_xml_zip_from_s3_url }}"
    dest: "{{ nexus_xml_dest_to_download_zip_file }}"

- name: Unarchive zip file in the same path
  unarchive:
    src: "{{ unarchive_the_zip_src_path }}"
    dest: "{{ unarchive_the_zip_dest_path }}"
    remote_src: yes

- name: starting nexus
  command: sudo service nexus restart

- name: wait for nexus to start
  wait_for: port="{{ nexus_port }}" delay=3 timeout=100

- debug:
    msg:
    - Nexus is successfully installed
    - Nexus is up and running



